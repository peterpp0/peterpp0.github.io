<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>note</title>
    <link href="/2025/06/29/note/"/>
    <url>/2025/06/29/note/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Magic</title>
    <link href="/2024/12/18/magic/"/>
    <url>/2024/12/18/magic/</url>
    
    <content type="html"><![CDATA[<p>Darwin Ortiz是作者非常喜欢的魔术师，接下来会陆续分享这两本书的阅读心得。</p><p>Strong Magic ：探讨了魔术表演的艺术性和心理学，提供了如何让魔术表演更具影响力和吸引力的见解。<br>Designing Miracles ：探讨了如何设计和构建魔术效果，使其在观众眼中更加神奇和不可思议。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Magic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hpc tutorial</title>
    <link href="/2024/12/18/tutorial/"/>
    <url>/2024/12/18/tutorial/</url>
    
    <content type="html"><![CDATA[<h1 id="HKU-HPC-Tutorial"><a href="#HKU-HPC-Tutorial" class="headerlink" title="HKU HPC Tutorial"></a>HKU HPC Tutorial</h1><p>作者在第一次使用hpc时感觉对代码小白不是很友好，故根据自己的经验写下本教程，希望对第一次使用hpc的同学有所帮助。 在本教程中，我们将介绍如何使用 VSCode 连接到 HKU 的 HPC 资源并展示如何提交运行python或R程序。</p><h2 id="为什么选择-VSCode？"><a href="#为什么选择-VSCode？" class="headerlink" title="为什么选择 VSCode？"></a>为什么选择 VSCode？</h2><p>VSCode 支持多种编程语言，并且拥有丰富的插件生态系统，使其成为开发者的强大工具。与其他集成开发环境（IDE）相比，VSCode 更加轻量化，启动速度快，占用系统资源少，但同时又提供了强大的功能，如智能代码补全、调试工具、Git 集成和终端等，极大地提升了开发效率。使用 VSCode 连接 SSH 有许多好处：</p><ul><li><strong>无缝开发体验</strong>：您可以在本地使用熟悉的 VSCode 界面和功能，同时直接编辑和运行远程服务器上的代码。</li><li><strong>轻量化和快速</strong>：VSCode 启动速度快，占用资源少，非常适合在资源有限的环境中使用。</li><li><strong>节省时间</strong>：通过 SSH 连接，您可以避免频繁地在本地和远程之间传输文件。</li><li><strong>增强的调试能力</strong>：VSCode 提供强大的调试工具，可以帮助您在远程环境中更高效地调试代码。</li><li><strong>插件支持</strong>：VSCode 拥有丰富的插件库，您可以根据需要安装各种插件来提升生产力。</li></ul><p>本文将详细介绍如何通过 VSCode 连接到 HKU 的 HPC 资源，并配置远程开发环境，确保您能够高效地利用高性能计算资源。</p><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>在开始之前，请确保您已经完成以下步骤：</p><ul><li>安装 Visual Studio Code（VSCode）。</li><li>拥有 HKU HPC 的 SSH 账号和密码。</li></ul><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>1.在vs code的扩展商店中搜索remote以及python,安装以下插件。</p><img src="/2024/12/18/tutorial/1.png" class="" title="alt&#x3D;配图"><img src="/2024/12/18/tutorial/2.png" class="" title="插件"><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><p>2.点击左侧图标，并在SSH处点击➕new remote</p><img src="/2024/12/18/tutorial/3.png" class="" title="插件"><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><p>3.输入你的hpc账号，一般是你的名称➕服务器IP地址hpc2021-io1.hku.hk，之后会叫你选择系统，请选择Linux。</p><img src="/2024/12/18/tutorial/4.png" class="" title="插件"><h3 id="-3"><a href="#-3" class="headerlink" title=""></a></h3><p>4.点击.ssh文件下的第一项，你就能看到你的配置</p><img src="/2024/12/18/tutorial/5.png" class="" title="插件"><img src="/2024/12/18/tutorial/6.png" class="" title="插件"><h3 id="-4"><a href="#-4" class="headerlink" title=""></a></h3><p>5.此时你可以在窗口左侧看到连接入口箭头，点击connect in current window。</p><img src="/2024/12/18/tutorial/7.png" class="" title="插件"><h3 id="-5"><a href="#-5" class="headerlink" title=""></a></h3><p>6.输入hpc账号密码即可连接成功</p><img src="/2024/12/18/tutorial/8.png" class="" title="插件"><h3 id="-6"><a href="#-6" class="headerlink" title=""></a></h3><p>7.你可以通过点击左上角的文件，点击ok，可以通过vscode查看hpc账户下的文件。</p><img src="/2024/12/18/tutorial/9.png" class="" title="插件"><h3 id="-7"><a href="#-7" class="headerlink" title=""></a></h3><p>8.此时你可以通过点击的方式<em>打开文件</em>，或者点击右上角的➕来<em>创建文件</em>及文件夹。你也可以把你本地文件直接拖到这里的文件夹里面，实现快速简单的文件上传。也可以通过右键下载的方式，将服务器上的文件<strong>下载</strong>到本地电脑。</p><img src="/2024/12/18/tutorial/11.png" class="" title="插件"><h3 id="-8"><a href="#-8" class="headerlink" title=""></a></h3><p>至此，你已经能够通过vscode顺利连接hpc并实现文件的传输下载啦🎉🎉🎉，下一部分将讲解如何运行python程序。</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><h3 id="-9"><a href="#-9" class="headerlink" title=""></a></h3><p>我们可以查看左下角确认我们是否已经通过SSH连接成功。</p><img src="/2024/12/18/tutorial/13.png" class="" title="插件"><h3 id="-10"><a href="#-10" class="headerlink" title=""></a></h3><p>由于vscode可以帮助我们实现文件传输的功能，因此我们在连接的时候不需要管head节点，只需要连接io节点，这样里面才有对应的python和R包来运行程序。</p><img src="/2024/12/18/tutorial/12.png" class="" title="插件"><h3 id="-11"><a href="#-11" class="headerlink" title=""></a></h3><p>在检查完我们已经成功连接到io节点后，我们可以在想要的文件夹下创建.py文件，并使用vscode编辑代码，记得及时ctr+s保存你的代码。</p><img src="/2024/12/18/tutorial/14.png" class="" title="插件"><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>在使用hpc的时候，由于我们使用的linux系统，并没有一个类似于电脑桌面以及鼠标的界面，从而我们需要使用Linux指令的方式来访问并运行想要的文件。由于vscode已经提供了快捷创建文件的方式，我们在此只介绍切换目录相关的指令。<br>相信各位经常使用R的同学能够理解当前目录&#x2F;文件路径的概念，在此不多赘述。我们可以在终端使用这些指令，来替代平常使用鼠标点击文件夹的方式。</p><p>查看当前目录下的文件和文件夹</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p>返回上一级目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> ..<br></code></pre></td></tr></table></figure><p>进入当前目录下的下一级目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> path_name<br></code></pre></td></tr></table></figure><p>我们可以在vscode里面新创建一个终端。</p><img src="/2024/12/18/tutorial/15.png" class="" title="插件"><h3 id="-12"><a href="#-12" class="headerlink" title=""></a></h3><p>可以在终端输入上述指令并按回车键，大致就能了解其使用方法</p><img src="/2024/12/18/tutorial/16.png" class="" title="插件"><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>简单运行python</p><h3 id="-13"><a href="#-13" class="headerlink" title=""></a></h3><p>1.在左侧文件管理的界面进入或创建你想要的文件夹，创建你的python文件，并编辑python代码。</p><h3 id="-14"><a href="#-14" class="headerlink" title=""></a></h3><p>1.在运行我们的python之前，我们还需要加载python<br>在终端输入下述代码并按回车</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">module load python/3.9<br></code></pre></td></tr></table></figure><p>2.为了能更好地管理我们的项目，特别是处理一些包的依赖问题，我们需要为python运行创建一个虚拟环境（也就是找到一个空间专门存放我们该项目需要的包），在运行python时，就会优先调用虚拟环境里面的包。<br>我们可以打开终端terminal，通过刚刚讲述的cd指令进入到我们想要放置虚拟环境的文件夹，并输入下述代码按回车。由于hku官方推荐使用anaconda的方式创建虚拟环境，因此我们采用conda管理虚拟环境。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">module load anaconda<br>conda create --name myenv python=3.9<br></code></pre></td></tr></table></figure><p>3.在创建好虚拟环境后，我们在终端输入下述代码并按回车，通过这一步，我们激活了虚拟环境，也就是告诉了系统，我们希望优先使用这个环境里面的python和包。正常情况下我们会在终端前面看到一个（myenv）的标记，代表我们已经成功激活了虚拟环境。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">conda activate myenv<br></code></pre></td></tr></table></figure><p>在激活完虚拟环境后，我们可以输入conda install your_package 的方式安装相关包。</p><p>4.最后一步运行python文件。由于我们已经激活了虚拟环境并加载了python，我们最后一步就能顺利运行python程序了。<br>在终端输入下述代码并按回车，程序就能正常运行啦！(注意：如果需要推出虚拟环境，可以在终端输入conda deactivate，下次再次运行程序是需要重新激活虚拟环境 conda activate myenv)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">python 你的python文件名.py<br></code></pre></td></tr></table></figure><p>5.除了通过上述方法运行程序外，你也可以使用vscode自带的运行功能。点击右下角箭头位置，为vscode指定你的python解释器（图片中选择了newenv虚拟环境中的python作为解释器）正常来说选择conda文件夹下的myenv（这是你创建虚拟环境时给虚拟环境起的名字）即可。</p><img src="/2024/12/18/tutorial/17.png" class="" title="插件"><p>如果正确选择了虚拟环境中的解释器，你就可以直接点击右上角的运行按钮run code或者进行debug。至此我们在vscode中实现了文件传输，直接运行python等功能。接下来我们将讲解使用vscode提供的终端来提交程序作业。</p><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p>在 SLURM 调度器上运行 Python 作业。</p><p>HPC 环境中有很多用户共享有限的计算资源。作业调度系统负责管理和分配这些资源，以确保每个用户可以公平地使用它们。调度器根据作业的资源需求和系统的当前负载来分配资源，优化资源的利用率。调度系统允许用户提交批处理作业，这些作业可以在用户不在场的情况下自动运行。用户可以编写脚本来批量提交多个作业，调度系统会按顺序或并行地运行这些作业。这大大提高了工作效率。</p><h3 id="1-创建-SLURM-作业脚本"><a href="#1-创建-SLURM-作业脚本" class="headerlink" title="1.创建 SLURM 作业脚本"></a>1.创建 SLURM 作业脚本</h3><p>接下来，创建一个 SLURM 作业脚本（例如 run_python_job.sh），该脚本将激活虚拟环境并运行Python 程序。这个脚本相当于把我们之前的指令整合到了一起运行。具体的指令需求大家可以自行使用GPT询问。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#SBATCH --job-name=my_python_job    # 作业名称</span><br><span class="hljs-comment">#SBATCH --output=output_%j.txt      # 标准输出和错误输出文件</span><br><span class="hljs-comment">#SBATCH --error=error_%j.txt        # 错误输出文件</span><br><span class="hljs-comment">#SBATCH --time=01:00:00             # 作业运行时间上限</span><br><span class="hljs-comment">#SBATCH --partition=compute         # 分区名称</span><br><span class="hljs-comment">#SBATCH --nodes=1                   # 请求的节点数</span><br><span class="hljs-comment">#SBATCH --ntasks=1                  # 任务数</span><br><span class="hljs-comment">#SBATCH --cpus-per-task=4           # 每个任务的CPU核心数</span><br><span class="hljs-comment">#SBATCH --mem=4G                    # 请求的内存</span><br><br><span class="hljs-comment"># 加载必要的模块（如果需要）</span><br>module load python/3.9<br><br><span class="hljs-comment"># 激活虚拟环境</span><br><span class="hljs-built_in">source</span> myenv/bin/activate<br><br><span class="hljs-comment"># 运行 Python 程序</span><br>python my_script.py<br><br><span class="hljs-comment"># 退出虚拟环境</span><br>deactivate<br></code></pre></td></tr></table></figure><h3 id="提交作业"><a href="#提交作业" class="headerlink" title="提交作业"></a>提交作业</h3><p>在终端输入下述 sbatch 命令提交作业脚本到 SLURM 调度器，程序就能正常运行啦。注意run_python_job.sh应该在终端输入指令所处的路径上</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sbatch run_python_job.sh<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>hku</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hku hpc</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
